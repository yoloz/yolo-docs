"use strict";(self.webpackChunkyolo_docs=self.webpackChunkyolo_docs||[]).push([[7550],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,o(o({ref:t},p),{},{components:n})):r.createElement(g,o({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},77569:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const i={},o=void 0,l={unversionedId:"spring/\u7b2c\u4e09\u65b9Dialect",id:"spring/\u7b2c\u4e09\u65b9Dialect",title:"\u7b2c\u4e09\u65b9Dialect",description:"\u9ed8\u8ba4\u652f\u6301\u7684 Dialect",source:"@site/docs/spring/\u7b2c\u4e09\u65b9Dialect.md",sourceDirName:"spring",slug:"/spring/\u7b2c\u4e09\u65b9Dialect",permalink:"/docs/spring/\u7b2c\u4e09\u65b9Dialect",draft:!1,editUrl:"https://github.com/yoloz/yolo-docs/tree/docusaurus/docs/spring/\u7b2c\u4e09\u65b9Dialect.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6ce8\u89e3Scheduled\u548cAsync",permalink:"/docs/spring/\u6ce8\u89e3Scheduled\u548cAsync"},next:{title:"\u7ec6\u8282\u95ee\u9898\u70b9",permalink:"/docs/spring/\u7ec6\u8282\u95ee\u9898\u70b9"}},c={},s=[{value:"\u9ed8\u8ba4\u652f\u6301\u7684 Dialect",id:"\u9ed8\u8ba4\u652f\u6301\u7684-dialect",level:2},{value:"\u6269\u5c55\u7b2c\u4e09\u65b9 Dialect",id:"\u6269\u5c55\u7b2c\u4e09\u65b9-dialect",level:2}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9ed8\u8ba4\u652f\u6301\u7684-dialect"},"\u9ed8\u8ba4\u652f\u6301\u7684 Dialect"),(0,a.kt)("p",null,"Spring Data JDBC includes direct support for the following databases:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"DB2"),(0,a.kt)("li",{parentName:"ul"},"H2"),(0,a.kt)("li",{parentName:"ul"},"HSQLDB"),(0,a.kt)("li",{parentName:"ul"},"MariaDB"),(0,a.kt)("li",{parentName:"ul"},"Microsoft SQL Server"),(0,a.kt)("li",{parentName:"ul"},"MySQL"),(0,a.kt)("li",{parentName:"ul"},"Oracle"),(0,a.kt)("li",{parentName:"ul"},"Postgres")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/#requirements"},"\u66f4\u591a\u4fe1\u606f")),(0,a.kt)("p",null,"\u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u5217\u8868\u652f\u6301\u7684 dialect,\u542f\u52a8\u4f1a\u62a5\u9519\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-log"},"Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'jdbcMappingContext' defined in class path resource [org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration$SpringBootJdbcConfiguration.class]: Unsatisfied dependency expressed through method 'jdbcMappingContext' parameter 1: Error creating bean with name 'jdbcCustomConversions' defined in class path resource [org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration$SpringBootJdbcConfiguration.class]: Failed to instantiate [org.springframework.data.jdbc.core.convert.JdbcCustomConversions]: Factory method 'jdbcCustomConversions' threw exception with message: Error creating bean with name 'jdbcDialect' defined in class path resource [org/springframework/boot/autoconfigure/data/jdbc/JdbcRepositoriesAutoConfiguration$SpringBootJdbcConfiguration.class]: Failed to instantiate [org.springframework.data.relational.core.dialect.Dialect]: Factory method 'jdbcDialect' threw exception with message: Cannot determine a dialect for org.springframework.jdbc.core.JdbcTemplate@4540c7; Please provide a Dialect\n")),(0,a.kt)("p",null,"\u6e90\u7801",(0,a.kt)("inlineCode",{parentName:"p"},"org.springframework.data.jdbc.repository.config.DialectResolver"),"(spring-data-jdbc-3.1.0)\u6709\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},' @Nullable\nprivate static Dialect getDialect(Connection connection) throws SQLException {\n    DatabaseMetaData metaData = connection.getMetaData();\n    String name = metaData.getDatabaseProductName().toLowerCase(Locale.ENGLISH);\n    if (name.contains("hsql")) {\n        return HsqlDbDialect.INSTANCE;\n    } else if (name.contains("h2")) {\n        return H2Dialect.INSTANCE;\n    } else if (name.contains("mysql")) {\n        return new JdbcMySqlDialect(getIdentifierProcessing(metaData));\n    } else if (name.contains("mariadb")) {\n        return new MariaDbDialect(getIdentifierProcessing(metaData));\n    } else if (name.contains("postgresql")) {\n        return JdbcPostgresDialect.INSTANCE;\n    } else if (name.contains("microsoft")) {\n        return JdbcSqlServerDialect.INSTANCE;\n    } else if (name.contains("db2")) {\n        return JdbcDb2Dialect.INSTANCE;\n    } else if (name.contains("oracle")) {\n        return OracleDialect.INSTANCE;\n    } else {\n        DialectResolver.LOG.info(String.format("Couldn\'t determine Dialect for \\"%s\\"", name));\n        return null;\n    }\n}\n')),(0,a.kt)("h2",{id:"\u6269\u5c55\u7b2c\u4e09\u65b9-dialect"},"\u6269\u5c55\u7b2c\u4e09\u65b9 Dialect"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-data/jdbc/docs/current/reference/html/#jdbc.dialects"},"\u53c2\u89c1 Dialects"),",\u5982\u4e0b\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Implement your own ",(0,a.kt)("inlineCode",{parentName:"li"},"Dialect"),";"),(0,a.kt)("li",{parentName:"ol"},"Implement a ",(0,a.kt)("inlineCode",{parentName:"li"},"JdbcDialectProvider")," returning the ",(0,a.kt)("inlineCode",{parentName:"li"},"Dialect"),"."),(0,a.kt)("li",{parentName:"ol"},"Register the provider by creating a ",(0,a.kt)("inlineCode",{parentName:"li"},"spring.factories")," resource under ",(0,a.kt)("inlineCode",{parentName:"li"},"META-INF")," and perform the registration by adding a line\n",(0,a.kt)("inlineCode",{parentName:"li"},"org.springframework.data.jdbc.repository.config.DialectResolver$JdbcDialectProvider=<fully qualified name of your JdbcDialectProvider>"))),(0,a.kt)("p",null,"\u5b9e\u9645\u64cd\u4f5c\u5982\u4e0b\uff1a"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u7b2c\u4e09\u65b9\u9a71\u52a8\u6dfb\u52a0\u4f9d\u8d56\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-jdbc</artifactId>\n    <version>3.1.0</version>\n    \x3c!-- \u65e0\u9700\u6253\u5305\u8fdbjar\u4e2d --\x3e\n    <scope>compile</scope>\n</dependency>\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"\u53c2\u8003",(0,a.kt)("inlineCode",{parentName:"li"},"spring-data-relational"),"\u4e2d\u7684\u5df2\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"li"},"Dialect"),"\uff0c\u7b80\u5355\u6837\u4f8b\u5982\u4e0b\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class ZHDSDialect extends AnsiDialect {\n\n    public static final ZHDSDialect INSTANCE = new ZHDSDialect();\n\n    @Override\n    @NonNull\n    public LockClause lock() {\n        return LOCK_CLAUSE;\n    }\n\n    @Override\n    @NonNull\n    public ArrayColumns getArraySupport() {\n        return ArrayColumns.Unsupported.INSTANCE;\n    }\n\n    private static final LockClause LOCK_CLAUSE = new LockClause() {\n\n        @Override\n        @NonNull\n        public String getLock(@NonNull LockOptions lockOptions) {\n            return "WITH LOCK";\n        }\n\n        @Override\n        @NonNull\n        public Position getClausePosition() {\n            return Position.AFTER_ORDER_BY;\n        }\n    };\n}\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"\u53c2\u8003",(0,a.kt)("inlineCode",{parentName:"li"},"org.springframework.data.jdbc.repository.config.DialectResolver"),"\u4e2d\u7684",(0,a.kt)("inlineCode",{parentName:"li"},"DefaultDialectProvider"),",\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"li"},"JdbcDialectProvider"),"\u5982\u4e0b\uff1a")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'public class ZHDSDialectResolver implements DialectResolver.JdbcDialectProvider {\n\n    private static final Log log = LogFactory.getLog(ZHDSDialectResolver.class);\n\n    @Override\n    @NonNull\n    public Optional<Dialect> getDialect(JdbcOperations operations) {\n        return Optional.ofNullable(operations.execute(ZHDSDialectResolver::getDialectImpl));\n    }\n\n    @Nullable\n    private static Dialect getDialectImpl(Connection connection) throws SQLException {\n        DatabaseMetaData metaData = connection.getMetaData();\n        String name = metaData.getDatabaseProductName().toLowerCase(Locale.ENGLISH);\n        if (name.contains("zhds")) {\n            return ZHDSDialect.INSTANCE;\n        } else {\n            log.logWarn(String.format("Couldn\'t determine Dialect for \\"%s\\"", name));\n            return null;\n        }\n    }\n}\n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"\u5728",(0,a.kt)("inlineCode",{parentName:"li"},"META-INF\u4e2d"),"\u65b0\u5efa\u540d\u79f0\u4e3a",(0,a.kt)("inlineCode",{parentName:"li"},"spring.factories"),"\u7684\u6587\u4ef6\uff0c\u5185\u5bb9\u4e3a\uff1a",(0,a.kt)("inlineCode",{parentName:"li"},"org.springframework.data.jdbc.repository.config.DialectResolver$JdbcDialectProvider=com.abc.edf.ZHDSDialectResolver"))))}u.isMDXComponent=!0}}]);