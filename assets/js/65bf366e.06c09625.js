"use strict";(self.webpackChunkyolo_docs=self.webpackChunkyolo_docs||[]).push([[8045],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,d=p["".concat(s,".").concat(g)]||p[g]||u[g]||l;return n?a.createElement(d,i(i({ref:t},m),{},{components:n})):a.createElement(d,i({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9331:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const l={},i=void 0,o={unversionedId:"java/LambdaStreamAPI",id:"java/LambdaStreamAPI",title:"LambdaStreamAPI",description:"Stream.collect()",source:"@site/docs/java/LambdaStreamAPI.md",sourceDirName:"java",slug:"/java/LambdaStreamAPI",permalink:"/docs/java/LambdaStreamAPI",draft:!1,editUrl:"https://github.com/yoloz/yolo-docs/tree/docusaurus/docs/java/LambdaStreamAPI.md",tags:[],version:"current",lastUpdatedAt:1689663630,formattedLastUpdatedAt:"2023\u5e747\u670818\u65e5",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JNI\u548cJNA\u7684\u4f7f\u7528",permalink:"/docs/java/JNI\u548cJNA\u7684\u4f7f\u7528"},next:{title:"Stream2String",permalink:"/docs/java/Stream2String"}},s={},c=[{value:"Stream.collect()",id:"streamcollect",level:2},{value:"toMap",id:"tomap",level:3},{value:"toList/toSet",id:"tolisttoset",level:3},{value:"toCollection",id:"tocollection",level:3},{value:"minBy",id:"minby",level:3},{value:"averagingX",id:"averagingx",level:3},{value:"summingX",id:"summingx",level:3},{value:"summarizingX",id:"summarizingx",level:3},{value:"groupingBy",id:"groupingby",level:3},{value:"partitioningBy",id:"partitioningby",level:3},{value:"joining",id:"joining",level:3},{value:"collectingAndThen",id:"collectingandthen",level:3},{value:"mapping",id:"mapping",level:3},{value:"counting",id:"counting",level:3},{value:"teeing",id:"teeing",level:3},{value:"flatMap \u548c map \u7684\u533a\u522b",id:"flatmap-\u548c-map-\u7684\u533a\u522b",level:2},{value:"Stream.reduce()",id:"streamreduce",level:2}],m={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"streamcollect"},"Stream.collect()"),(0,r.kt)("p",null,"Stream.collect()\u662f java 8 stream api \u4e2d\u7684\u7ec8\u6b62\u65b9\u6cd5,\u4e00\u822c\u7528\u4e8e\u6d41\u5904\u7406\u4e2d\u7684\u6700\u540e\u4e00\u6b65\u3002\u5b83\u5b9e\u73b0\u5bf9\u6d41\u5b9e\u4f8b\u4e2d\u4fdd\u5b58\u7684\u6570\u636e\u5143\u7d20\u6267\u884c\u53ef\u53d8\u7684\u6298\u53e0\u64cd\u4f5c(\u5c06\u5143\u7d20\u91cd\u65b0\u5305\u88c5\u81f3\u7279\u5b9a\u7684\u6570\u636e\u7ed3\u6784\u4e2d\uff0c\u5e76\u5e94\u7528\u4e00\u4e9b\u989d\u5916\u903b\u8f91\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\uff0c\u7b49\u7b49)\u3002\u6b64\u64cd\u4f5c\u7684\u7b56\u7565\u7531 Collector \u63a5\u53e3\u5b9e\u73b0\u63d0\u4f9b\u3002"),(0,r.kt)("h3",{id:"tomap"},"toMap"),(0,r.kt)("p",null,"ToMap \u6536\u96c6\u5668\u7528\u4e8e\u6536\u96c6\u6d41\u5143\u7d20\u81f3 Map \u5b9e\u4f8b\n\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u7528\u6765\u751f\u6210 key \u503c\u7684\n\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5c31\u662f\u7528\u6765\u751f\u6210 value \u503c\u7684\n\u7b2c\u4e09\u4e2a\u53c2\u6570\u7528\u5728 key \u503c\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff1a\u5982\u679c\u65b0\u5143\u7d20\u4ea7\u751f\u7684 key \u5728 Map \u4e2d\u5df2\u7ecf\u51fa\u73b0\u8fc7\u4e86\uff0c\u7b2c\u4e09\u4e2a\u53c2\u6570\u5c31\u4f1a\u5b9a\u4e49\u89e3\u51b3\u7684\u529e\u6cd5\u3002\n",(0,r.kt)("inlineCode",{parentName:"p"},".collect(Collectors.toMap(UserBo::getUserId, v -> v, (old, new) -> old))"),"\n\u7b2c\u4e00\u4e2a\u53c2\u6570 UserBo::getUserId \u8868\u793a\u9009\u62e9 UserBo \u7684 getUserId \u4f5c\u4e3a map \u7684 key \u503c\uff1b\n\u7b2c\u4e8c\u4e2a\u53c2\u6570 v -> v \u8868\u793a\u9009\u62e9\u5c06\u539f\u6765\u7684\u5bf9\u8c61\u4f5c\u4e3a map \u7684 value \u503c\uff1b\n\u7b2c\u4e09\u4e2a\u53c2\u6570(v1, v2) -> v1 \u4e2d\uff0c\u5982\u679c v1 \u4e0e v2 \u7684 key \u503c\u76f8\u540c\uff0c\u9009\u62e9 v1 \u4f5c\u4e3a\u90a3\u4e2a key \u6240\u5bf9\u5e94\u7684 value \u503c,\u5426\u5219\u51fa\u73b0 key \u91cd\u590d\u65f6\uff0c\u4f1a\u629b\u51fa\u5f02\u5e38\uff1a",(0,r.kt)("inlineCode",{parentName:"p"},'Exception in thread "main" java.lang.IllegalStateException: Duplicate key xxx'),"\n",(0,r.kt)("strong",{parentName:"p"},"\u7b2c\u56db\u4e2a\u53c2\u6570"),"\u9ed8\u8ba4\u662f HashMap::new,\u53ef\u4ee5\u6307\u5b9a\u8fd4\u56de\u7c7b\u578b\n",(0,r.kt)("inlineCode",{parentName:"p"},".collect(Collectors.toMap(UserBo::getUserId, v -> v, (old, new) -> old,LinkedHaspMap::new))")),(0,r.kt)("h3",{id:"tolisttoset"},"toList/toSet"),(0,r.kt)("p",null,"ToList \u65b9\u6cd5\u53ef\u4ee5\u6536\u96c6\u6240\u6709\u6d41\u4e2d\u5143\u7d20\u81f3 List \u5b9e\u4f8b\u3002\nToSet \u65b9\u6cd5\u53ef\u4ee5\u6536\u96c6\u6240\u6709\u6d41\u4e2d\u5143\u7d20\u81f3 Set \u5b9e\u4f8b\u3002\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e0d\u80fd\u5047\u8bbe\u4efb\u4f55 List \u6216 Set \u7684\u7279\u5b9a\u5b9e\u73b0\uff0c\u5982\u679c\u4f60\u60f3\u6307\u5b9a List \u6216 Set \u5b9e\u73b0\uff0c\u9700\u8981\u4f7f\u7528 toCollection \u4ee3\u66ff.\u4e0b\u9762\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u6d41\u5b9e\u4f8b\u8868\u793a\u5143\u7d20\u5e8f\u5217\uff0c\u7136\u540e\u6536\u96c6\u81f3 List/Set \u5b9e\u4f8b\u5bf9\u8c61\u4e2d\n",(0,r.kt)("inlineCode",{parentName:"p"},'List<String>=Stream.of("a", "b", "c","a").collect(Collectors.toList())')),(0,r.kt)("p",null,"Set \u4e0d\u5305\u542b\u91cd\u590d\u5143\u7d20\u3002\u5982\u679c\u96c6\u5408\u4e2d\u6709\u91cd\u590d\u5143\u7d20\uff0c\u5219 set \u4e2d\u4ec5\u4fdd\u7559\u4e00\u4e2a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'List<String> listWithDuplicates = Arrays.asList("a", "bb", "c", "d", "bb");\nSet<String> result = listWithDuplicates.stream().collect(toSet());\nassertThat(result).hasSize(4);\n')),(0,r.kt)("h3",{id:"tocollection"},"toCollection"),(0,r.kt)("p",null,"\u8f6c\u6362\u6210\u7279\u5b9a\u7684\u96c6\u5408\n",(0,r.kt)("inlineCode",{parentName:"p"},'List<String> treeSet = Stream.of("a", "c", "b", "a").collect(Collectors.toCollection(LinkedList::new))'),"\n",(0,r.kt)("strong",{parentName:"p"},"\u6ce8\u610f\u8fd9\u91cc\u4e0d\u80fd\u4f7f\u7528\u4e0d\u53ef\u53d8\u96c6\u5408\u5b9e\u73b0\u3002\u901a\u8fc7\u81ea\u5b9a\u4e49 Collector \u5b9e\u73b0\u6216\u4f7f\u7528 collectingAndThen\u3002")),(0,r.kt)("h3",{id:"minby"},"minBy"),(0,r.kt)("p",null,"MaxBy/MinBy \u6536\u96c6\u5668\u6839\u636e\u63d0\u4f9b\u7684 Comparator \u5b9e\u4f8b\uff0c\u8fd4\u56de\u6d41\u4e2d\u6700\u5927\u548c\u6700\u5c0f\u5143\u7d20"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Optional<Integer> i = Stream.of(3, 5, 2, 1).collect(Collectors.minBy(Integer::compare));\nOptional<Integer> i = Stream.of(3, 5, 2, 1).min(Integer::compare);\n")),(0,r.kt)("h3",{id:"averagingx"},"averagingX"),(0,r.kt)("p",null,"\u8fd4\u56de\u6d41\u4e2d\u62bd\u53d6\u5143\u7d20\u7684\u5e73\u5747\u503c\uff0c\u4e0b\u9762\u793a\u4f8b\u8ba1\u7b97\u5b57\u7b26\u4e32\u957f\u5ea6\u5e73\u5747\u503c\uff1a\n",(0,r.kt)("inlineCode",{parentName:"p"},'Double result = Arrays.asList("a", "bb", "ccc", "dd").stream().collect(averagingDouble(String::length));'),"\naveragingInt,averagingDouble..."),(0,r.kt)("h3",{id:"summingx"},"summingX"),(0,r.kt)("p",null,"\u8fd4\u56de\u62bd\u53d6\u5143\u7d20\u4e4b\u548c\uff0c\u4e0b\u9762\u8ba1\u7b97\u6240\u6709\u5b57\u7b26\u4e32\u957f\u5ea6\u4e4b\u548c\uff1a\n",(0,r.kt)("inlineCode",{parentName:"p"},'Double result = Arrays.asList("a", "bb", "ccc", "dd").stream().collect(summingDouble(String::length));')),(0,r.kt)("p",null,"summingInt,summingLong..."),(0,r.kt)("h3",{id:"summarizingx"},"summarizingX"),(0,r.kt)("p",null,"\u8fd4\u56de\u6d41\u4e2d\u62bd\u53d6\u7684\u6570\u503c\u5143\u7d20\u7684\u7edf\u8ba1\u7ed3\u679c\u7c7b\u578b\u3002\u4e0b\u9762\u793a\u4f8b\u83b7\u53d6\u5b57\u7b26\u4e32\u957f\u5ea6\u4fe1\u606f\uff1a\n",(0,r.kt)("inlineCode",{parentName:"p"},'\nDoubleSummaryStatistics result = Arrays.asList("a", "bb", "ccc", "dd").stream().collect(summarizingDouble(String::length));'),"\n\u53ef\u4ee5\u83b7\u53d6\u6700\u5927\u503c\u3001\u6700\u5c0f\u503c\u3001\u5e73\u5747\u503c\u3001\u603b\u548c\u503c\u3001\u603b\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"DoubleSummaryStatistics summaryStatistics = Stream.of(1, 3, 4).collect(Collectors.summarizingDouble(x -> x));\nSystem.out.println(summaryStatistics .getAverage());\n")),(0,r.kt)("p",null,"summarizingInt,summarizingDouble..."),(0,r.kt)("h3",{id:"groupingby"},"groupingBy"),(0,r.kt)("p",null,"\u5206\u7ec4\u6536\u96c6\u5668\u7528\u4e8e\u6839\u636e\u5c5e\u6027\u5bf9\u5143\u7d20\u8fdb\u884c\u5206\u7ec4\u5e76\u5b58\u50a8\u5728 Map \u5b9e\u4f8b\u4e2d\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u9ed8\u8ba4 HashMap::new \u7b2c\u4e09\u4e2a\u53c2\u6570\u9ed8\u8ba4 Collectors.toList()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Map<Integer, List<Integer>> map = Stream.of(1, 3, 3, 2).collect(Collectors.groupingBy(Function.identity()));\n// map:{1:[1],2:[2],3:[3,3]}\nMap<Integer, Integer> map = Stream.of(1, 3, 3, 2).collect(Collectors.groupingBy(Function.identity(), Collectors.summingInt(x -> x)));\n// map:{1:1,2:2,3:6}\nHashMap<Integer, List<Integer>> map = Stream.of(1, 3, 3, 2).collect(Collectors.groupingBy(Function.identity(), HashMap::new, Collectors.mapping(x -> x + 1, Collectors.toList())));\n// map:{1:[2],2:[3],3:[4,4]}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"identity()\u662f Function \u7c7b\u7684\u9759\u6001\u65b9\u6cd5,\u548c x->x \u662f\u4e00\u4e2a\u610f\u601d")),(0,r.kt)("h3",{id:"partitioningby"},"partitioningBy"),(0,r.kt)("p",null,"PartitioningBy \u662f\u4e00\u4e2a\u7279\u6b8a\u5206\u7ec4\u6536\u96c6\u5668\uff0c\u4f9d\u636e Predicate \u5b9e\u4f8b\u6536\u96c6\u6d41\u5143\u7d20\u81f3 Map \u4e2d\uff0c\u5b58\u50a8 Boolean \u503c\u4f5c\u4e3a key\uff0c\u503c\u4e3a\u96c6\u5408\u3002 \u201ctrue\u201d \u952e\u5bf9\u5e94\u503c\u4e3a\u5df2\u5339\u914d\u5143\u7d20\u7684\u96c6\u5408\uff0c\u201cfalse\u201d \u952e\u4e3a\u975e\u5339\u914d\u5143\u7d20\u96c6\u5408\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u9ed8\u8ba4\u4e3a Collectors.toList()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Map<Boolean, List<Integer>> map = Stream.of(1, 3, 3, 2).collect(Collectors.partitioningBy(x -> x > 2));\nMap<Boolean, Long> longMap = Stream.of(1, 3, 3, 2).collect(Collectors.partitioningBy(x -> x > 1, Collectors.counting()));\n")),(0,r.kt)("h3",{id:"joining"},"joining"),(0,r.kt)("p",null,"\u62fc\u63a5\u5b57\u7b26\u4e32\n",(0,r.kt)("inlineCode",{parentName:"p"},'Stream.of("1", "3", "3", "2").collect(Collectors.joining(","))')),(0,r.kt)("h3",{id:"collectingandthen"},"collectingAndThen"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'Integer integer = Stream.of("1", "2", "3").collect(Collectors.collectingAndThen(Collectors.toList(), x -> x.size()));'),"\n\u5148\u6267\u884c collect \u64cd\u4f5c\u540e\u518d\u6267\u884c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u8868\u8fbe\u5f0f,\u8fd9\u91cc\u662f\u5148\u585e\u5230\u96c6\u5408\uff0c\u518d\u5f97\u51fa\u96c6\u5408\u957f\u5ea6."),(0,r.kt)("h3",{id:"mapping"},"mapping"),(0,r.kt)("p",null,"\u8ddf Stream \u7684 map \u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53ea\u662f\u53c2\u6570\u6709\u70b9\u533a\u522b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"}," List<Integer> list = Stream.of(1, 3, 5).collect(Collectors.mapping(x -> x + 1, Collectors.toList()));\nList<Integer> list = Stream.of(1, 3, 5).map(x -> x + 1).collect(Collectors.toList());\n/**list:[2,4,6]*/\n")),(0,r.kt)("h3",{id:"counting"},"counting"),(0,r.kt)("p",null,"Counting \u662f\u4e00\u4e2a\u7b80\u5355\u6536\u96c6\u5668\uff0c\u8fd4\u56de\u5143\u7d20\u6570\u91cf"),(0,r.kt)("h3",{id:"teeing"},"teeing"),(0,r.kt)("p",null,"\u6839\u636e\u76ee\u524d\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u7684\u5185\u5bb9\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"List<Integer> numbers = Arrays.asList(42, 4, 2, 24);\nOptional<Integer> min = numbers.stream().collect(minBy(Integer::compareTo));\nOptional<Integer> max = numbers.stream().collect(maxBy(Integer::compareTo));\n// do something useful with min and max\n")),(0,r.kt)("p",null,"\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u4e0d\u7528\u7684\u6536\u96c6\u5668\uff0c\u7136\u540e\u5408\u5e76\u96c6\u5408\u53bb\u5b9e\u73b0\u76f8\u5e94\u4e1a\u52a1\u3002\u5728 Java 12 \u4e4b\u524d,\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6837\u529f\u80fd\u5fc5\u987b\u5bf9\u6d41\u6267\u884c\u4e24\u6b21\u64cd\u4f5c\uff0c\u628a\u4e2d\u95f4\u7ed3\u679c\u5b58\u50a8\u81f3\u4e34\u65f6\u5bf9\u8c61\u4e2d\uff0c\u6700\u540e\u5408\u5e76\u8fd4\u56de\u3002\n\u5e78\u8fd0\u7684\u662f\uff0cjava 12 \u63d0\u4f9b\u4e86\u5185\u7f6e\u6536\u96c6\u5668\u5e2e\u52a9\u6211\u4eec\u5904\u7406\u8fd9\u4e9b\u6b65\u9aa4\uff1a\u6211\u4eec\u4ec5\u9700\u63d0\u4f9b\u4e24\u4e2a\u6536\u96c6\u5668\u548c\u5408\u5e76\u51fd\u6570\u3002\n\u56e0\u4e3a\u65b0\u7684\u6536\u96c6\u5668 tee \u5bf9\u6d41\u6267\u884c\u4e24\u4e2a\u4e0d\u7528\u65b9\u5411\u7684\u64cd\u4f5c\uff0c\u6545\u79f0\u4e3a T \u6536\u96c6\u5668\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"numbers.stream().collect(teeing(\n  minBy(Integer::compareTo), // The first collector\n  maxBy(Integer::compareTo), // The second collector\n  (min, max) -> // Receives the result from those collectors and combines them\n));\n")),(0,r.kt)("h2",{id:"flatmap-\u548c-map-\u7684\u533a\u522b"},"flatMap \u548c map \u7684\u533a\u522b"),(0,r.kt)("p",null,"map:Returns a stream consisting of the results of applying the given function to the elements of this stream.\n",(0,r.kt)("em",{parentName:"p"},"\u8fd4\u56de\u4e00\u4e2a\u6d41\uff0c\u5305\u542b\u7ed9\u5b9a\u51fd\u6570\u5e94\u7528\u5728\u6d41\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u540e\u7684\u7ed3\u679c")),(0,r.kt)("p",null,"flatmap:Returns a stream consisting of the results of replacing each element of this stream with the contents of a mapped stream produced by applying the provided mapping function to each element.\n",(0,r.kt)("em",{parentName:"p"},"\u8fd4\u56de\u4e00\u4e2a\u6d41\uff0c\u5305\u542b\u5c06\u6b64\u6d41\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u66ff\u6362\u4e3a\u901a\u8fc7\u7ed9\u5b9a\u51fd\u6570\u6620\u5c04\u5e94\u7528\u4e8e\u6bcf\u4e2a\u5143\u7d20\u800c\u751f\u6210\u7684\u6620\u5c04\u6d41\u7684\u5185\u5bb9")),(0,r.kt)("p",null,"\u4f8b\u5b50\uff1a\u6709\u4e8c\u7bb1\u9e21\u86cb\uff0c\u6bcf\u7bb1 5 \u4e2a\uff0c\u73b0\u5728\u8981\u628a\u9e21\u86cb\u52a0\u5de5\u6210\u714e\u86cb\uff0c\u7136\u540e\u5206\u7ed9\u5b66\u751f\u3002"),(0,r.kt)("p",null,"map \u505a\u7684\u4e8b\u60c5\uff1a\u628a\u4e8c\u7bb1\u9e21\u86cb\u5206\u522b\u52a0\u5de5\u6210\u714e\u86cb\uff0c\u8fd8\u662f\u653e\u6210\u539f\u6765\u7684\u4e24\u7bb1\uff0c\u5206\u7ed9 2 \u7ec4\u5b66\u751f\uff1b"),(0,r.kt)("p",null,"flatMap \u505a\u7684\u4e8b\u60c5\uff1a\u628a\u4e8c\u7bb1\u9e21\u86cb\u5206\u522b\u52a0\u5de5\u6210\u714e\u86cb\uff0c\u7136\u540e\u653e\u5230\u4e00\u8d77\u301010 \u4e2a\u714e\u86cb\u3011\uff0c\u5206\u7ed9 10 \u4e2a\u5b66\u751f\uff1b"),(0,r.kt)("p",null,"\u6d4b\u8bd5\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class Map_FlatMap {\n    List<String[]> eggs = new ArrayList<>();\n    @Before\n    public void init() {\n        // \u7b2c\u4e00\u7bb1\u9e21\u86cb\n        eggs.add(new String[]{"\u9e21\u86cb_1", "\u9e21\u86cb_1", "\u9e21\u86cb_1", "\u9e21\u86cb_1", "\u9e21\u86cb_1"});\n        // \u7b2c\u4e8c\u7bb1\u9e21\u86cb\n        eggs.add(new String[]{"\u9e21\u86cb_2", "\u9e21\u86cb_2", "\u9e21\u86cb_2", "\u9e21\u86cb_2", "\u9e21\u86cb_2"});\n    }\n\n    // \u81ea\u589e\u751f\u6210\u7ec4\u7f16\u53f7\n    static int group = 1;\n    // \u81ea\u589e\u751f\u6210\u5b66\u751f\u7f16\u53f7\n    static int student = 1;\n\n    /**\n     * \u628a\u4e8c\u7bb1\u9e21\u86cb\u5206\u522b\u52a0\u5de5\u6210\u714e\u86cb\uff0c\u8fd8\u662f\u653e\u5728\u539f\u6765\u7684\u4e24\u7bb1\uff0c\u5206\u7ed92\u7ec4\u5b66\u751f\n     */\n    @Test\n    public void map() {\n        eggs.stream()\n                .map(x -> Arrays.stream(x).map(y -> y.replace("\u9e21", "\u714e")))\n                .forEach(x -> System.out.println("\u7ec4" + group++ + ":" + Arrays.toString(x.toArray())));\n        /*\n        \u63a7\u5236\u53f0\u6253\u5370\uff1a------------\n        \u7ec41:[\u714e\u86cb_1, \u714e\u86cb_1, \u714e\u86cb_1, \u714e\u86cb_1, \u714e\u86cb_1]\n        \u7ec42:[\u714e\u86cb_2, \u714e\u86cb_2, \u714e\u86cb_2, \u714e\u86cb_2, \u714e\u86cb_2]\n         */\n    }\n\n    /**\n     * \u628a\u4e8c\u7bb1\u9e21\u86cb\u5206\u522b\u52a0\u5de5\u6210\u714e\u86cb\uff0c\u7136\u540e\u653e\u5230\u4e00\u8d77\u301010\u4e2a\u714e\u86cb\u3011\uff0c\u5206\u7ed910\u4e2a\u5b66\u751f\n     */\n    @Test\n    public void flatMap() {\n        eggs.stream()\n                .flatMap(x -> Arrays.stream(x).map(y -> y.replace("\u9e21", "\u714e")))\n                .forEach(x -> System.out.println("\u5b66\u751f" + student++ + ":" + x));\n        /*\n        \u63a7\u5236\u53f0\u6253\u5370\uff1a------------\n        \u5b66\u751f1:\u714e\u86cb_1\n        \u5b66\u751f2:\u714e\u86cb_1\n        \u5b66\u751f3:\u714e\u86cb_1\n        \u5b66\u751f4:\u714e\u86cb_1\n        \u5b66\u751f5:\u714e\u86cb_1\n        \u5b66\u751f6:\u714e\u86cb_2\n        \u5b66\u751f7:\u714e\u86cb_2\n        \u5b66\u751f8:\u714e\u86cb_2\n        \u5b66\u751f9:\u714e\u86cb_2\n        \u5b66\u751f10:\u714e\u86cb_2\n         */\n    }\n}\n')),(0,r.kt)("h2",{id:"streamreduce"},"Stream.reduce()"),(0,r.kt)("p",null,"Stream.reduce()\u5408\u5e76\u6d41\u7684\u5143\u7d20\u5e76\u4ea7\u751f\u5355\u4e2a\u503c"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6570\u5b66\u8fd0\u7b97")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint sum = Arrays.stream(numbers).reduce(0, (a, b) -> a + b);    // 55\nint sum2 = Arrays.stream(numbers).reduce(0, Integer::sum);      // 55\nint sum3 = Arrays.stream(numbers).reduce(0, (a, b) -> a - b);   // -55\nint sum4 = Arrays.stream(numbers).reduce(0, (a, b) -> a * b);   // 0, initial is 0, 0 * whatever = 0\nint sum5 = Arrays.stream(numbers).reduce(0, (a, b) -> a / b);   // 0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u6700\u5927\u548c\u6700\u5c0f")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int[] numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nint max = Arrays.stream(numbers).reduce(0, (a, b) -> a > b ? a : b);  // 10\nint max1 = Arrays.stream(numbers).reduce(0, Integer::max);            // 10\nint min = Arrays.stream(numbers).reduce(0, (a, b) -> a < b ? a : b);  // 0\nint min1 = Arrays.stream(numbers).reduce(0, Integer::min);            // 0\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u8fde\u63a5\u5b57\u7b26\u4e32")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'String[] strings = {"a", "b", "c", "d", "e"};\n  // |a|b|c|d|e , the initial | join is not what we want\n  String reduce = Arrays.stream(strings).reduce("", (a, b) -> a + "|" + b);\n\n  // a|b|c|d|e, filter the initial "" empty string\n  String reduce2 = Arrays.stream(strings).reduce("", (a, b) -> {\n      if (!"".equals(a)) {\n          return a + "|" + b;\n      } else {\n          return b;\n      }\n  });\n  // a|b|c|d|e , better uses the Java 8 String.join :)  \uff08\u6700\u597d\u4f7f\u7528 Java 8 \u7684 String.join\uff09\n  String join = String.join("|", strings);\n')))}u.isMDXComponent=!0}}]);